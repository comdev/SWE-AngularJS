"use strict";
Object.defineProperties(module.exports, {
  fakeAsync: {get: function() {
      return fakeAsync;
    }},
  tick: {get: function() {
      return tick;
    }},
  flushMicrotasks: {get: function() {
      return flushMicrotasks;
    }},
  __esModule: {value: true}
});
var $__angular2_47_src_47_facade_47_lang__,
    $__angular2_47_src_47_facade_47_collection__;
var $__0 = ($__angular2_47_src_47_facade_47_lang__ = require("angular2/src/facade/lang"), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || {default: $__angular2_47_src_47_facade_47_lang__}),
    BaseException = $__0.BaseException,
    global = $__0.global;
var ListWrapper = ($__angular2_47_src_47_facade_47_collection__ = require("angular2/src/facade/collection"), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || {default: $__angular2_47_src_47_facade_47_collection__}).ListWrapper;
var _scheduler;
var _microtasks = [];
var _pendingPeriodicTimers = [];
var _pendingTimers = [];
var _error = null;
function fakeAsync(fn) {
  var fakeAsyncZone = global.zone.fork({
    setTimeout: _setTimeout,
    clearTimeout: _clearTimeout,
    setInterval: _setInterval,
    clearInterval: _clearInterval,
    scheduleMicrotask: _scheduleMicrotask,
    _inFakeAsyncZone: true
  });
  return function() {
    for (var args = [],
        $__3 = 0; $__3 < arguments.length; $__3++)
      args[$__3] = arguments[$__3];
    _scheduler = global.jasmine.DelayedFunctionScheduler();
    ListWrapper.clear(_microtasks);
    ListWrapper.clear(_pendingPeriodicTimers);
    ListWrapper.clear(_pendingTimers);
    var res = fakeAsyncZone.run((function() {
      var res = fn.apply((void 0), $traceurRuntime.spread(args));
    }));
    if (_pendingPeriodicTimers.length > 0) {
      throw new BaseException((_pendingPeriodicTimers.length + " periodic timer(s) still in the queue."));
    }
    if (_pendingTimers.length > 0) {
      throw new BaseException((_pendingTimers.length + " timer(s) still in the queue."));
    }
    _scheduler = null;
    ListWrapper.clear(_microtasks);
    return res;
  };
}
Object.defineProperty(fakeAsync, "parameters", {get: function() {
    return [[Function]];
  }});
function tick() {
  var millis = arguments[0] !== (void 0) ? arguments[0] : 0;
  _assertInFakeAsyncZone();
  flushMicrotasks();
  _scheduler.tick(millis);
}
Object.defineProperty(tick, "parameters", {get: function() {
    return [[$traceurRuntime.type.number]];
  }});
function flushMicrotasks() {
  _assertInFakeAsyncZone();
  while (_microtasks.length > 0) {
    var microtask = ListWrapper.removeAt(_microtasks, 0);
    microtask();
  }
}
function _setTimeout(fn, delay) {
  for (var args = [],
      $__3 = 2; $__3 < arguments.length; $__3++)
    args[$__3 - 2] = arguments[$__3];
  var cb = _fnAndFlush(fn);
  var id = _scheduler.scheduleFunction(cb, delay, args);
  ListWrapper.push(_pendingTimers, id);
  _scheduler.scheduleFunction(_dequeueTimer(id), delay);
  return id;
}
Object.defineProperty(_setTimeout, "parameters", {get: function() {
    return [[Function], [$traceurRuntime.type.number], []];
  }});
function _clearTimeout(id) {
  _dequeueTimer(id);
  return _scheduler.removeFunctionWithId(id);
}
Object.defineProperty(_clearTimeout, "parameters", {get: function() {
    return [[$traceurRuntime.type.number]];
  }});
function _setInterval(fn, interval) {
  for (var args = [],
      $__4 = 2; $__4 < arguments.length; $__4++)
    args[$__4 - 2] = arguments[$__4];
  var cb = _fnAndFlush(fn);
  var id = _scheduler.scheduleFunction(cb, interval, args, true);
  _pendingPeriodicTimers.push(id);
  return id;
}
Object.defineProperty(_setInterval, "parameters", {get: function() {
    return [[Function], [$traceurRuntime.type.number], []];
  }});
function _clearInterval(id) {
  ListWrapper.remove(_pendingPeriodicTimers, id);
  return _scheduler.removeFunctionWithId(id);
}
Object.defineProperty(_clearInterval, "parameters", {get: function() {
    return [[$traceurRuntime.type.number]];
  }});
function _fnAndFlush(fn) {
  var $__2 = arguments;
  return (function() {
    fn.apply(global, $__2);
    flushMicrotasks();
  });
}
Object.defineProperty(_fnAndFlush, "parameters", {get: function() {
    return [[Function]];
  }});
function _scheduleMicrotask(microtask) {
  ListWrapper.push(_microtasks, microtask);
}
Object.defineProperty(_scheduleMicrotask, "parameters", {get: function() {
    return [[Function]];
  }});
function _dequeueTimer(id) {
  return function() {
    ListWrapper.remove(_pendingTimers, id);
  };
}
Object.defineProperty(_dequeueTimer, "parameters", {get: function() {
    return [[$traceurRuntime.type.number]];
  }});
function _assertInFakeAsyncZone() {
  if (!global.zone._inFakeAsyncZone) {
    throw new Error('The code should be running in the fakeAsync zone to call this function');
  }
}
//# sourceMappingURL=fake_async.es6.map

//# sourceMappingURL=./fake_async.map