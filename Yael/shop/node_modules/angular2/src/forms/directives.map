{"version":3,"sources":["directives.js"],"names":[],"mappings":"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","file":"angular2/src/forms/directives.js","sourcesContent":["import {Directive} from 'angular2/src/core/annotations_impl/annotations';\nimport {Ancestor} from 'angular2/src/core/annotations_impl/visibility';\nimport {ElementRef} from 'angular2/src/core/compiler/element_ref';\nimport {Optional} from 'angular2/src/di/annotations_impl';\nimport {Renderer} from 'angular2/src/render/api';\nimport {isPresent, isString, CONST_EXPR, isBlank, BaseException} from 'angular2/src/facade/lang';\nimport {ListWrapper} from 'angular2/src/facade/collection';\nimport {ControlGroup, Control, isControl} from './model';\nimport {Validators} from './validators';\n\n//export interface ControlValueAccessor {\n//  writeValue(value):void{}\n//  set onChange(fn){}\n//}\n\nfunction _lookupControl(groupDirective:ControlGroupDirective, controlOrName:any):any {\n  if (isControl(controlOrName)) {\n    return controlOrName;\n  }\n\n  if (isBlank(groupDirective)) {\n    throw new BaseException(`No control group found for \"${controlOrName}\"`);\n  }\n\n  var control = groupDirective.findControl(controlOrName);\n\n  if (isBlank(control)) {\n    throw new BaseException(`Cannot find control \"${controlOrName}\"`);\n  }\n\n  return control;\n}\n\n/**\n * The default accessor for writing a value and listening to changes that is used by a {@link Control} directive.\n *\n * This is the default strategy that Angular uses when no other accessor is applied.\n *\n *  # Example\n *  ```\n *  <input type=\"text\" [control]=\"loginControl\">\n *  ```\n *\n * @exportedAs angular2/forms\n */\n@Directive({\n  selector: '[control]',\n  hostListeners: {\n    'change' : 'onChange($event.target.value)',\n    'input' : 'onChange($event.target.value)'\n  },\n  hostProperties: {\n    'value' : 'value'\n  }\n})\nexport class DefaultValueAccessor {\n  value;\n  onChange:Function;\n\n  constructor() {\n    this.onChange = (_) => {};\n  }\n\n  writeValue(value) {\n    this.value = value\n  }\n}\n\n/**\n * The accessor for writing a value and listening to changes on a checkbox input element.\n *\n *\n *  # Example\n *  ```\n *  <input type=\"checkbox\" [control]=\"rememberLogin\">\n *  ```\n *\n * @exportedAs angular2/forms\n */\n@Directive({\n  selector: 'input[type=checkbox][control]',\n  hostListeners: {\n    'change' : 'onChange($event.target.checked)'\n  },\n  hostProperties: {\n    'checked' : 'checked'\n  }\n})\nexport class CheckboxControlValueAccessor {\n  _elementRef:ElementRef;\n  _renderer:Renderer;\n\n  checked:boolean;\n  onChange:Function;\n\n  constructor(cd:ControlDirective, elementRef:ElementRef, renderer:Renderer) {\n    this.onChange = (_) => {};\n    this._elementRef = elementRef;\n    this._renderer = renderer;\n    cd.valueAccessor = this; //ControlDirective should inject CheckboxControlDirective\n  }\n\n  writeValue(value) {\n    this._renderer.setElementProperty(this._elementRef.parentView.render, this._elementRef.boundElementIndex,\n      'checked', value)\n  }\n}\n\n/**\n * Binds a control to a DOM element.\n *\n * # Example\n *\n * In this example, we bind the control to an input element. When the value of the input element changes, the value of\n * the control will reflect that change. Likewise, if the value of the control changes, the input element reflects that\n * change.\n *\n * Here we use {@link formDirectives}, rather than importing each form directive individually, e.g.\n * `ControlDirective`, `ControlGroupDirective`. This is just a shorthand for the same end result.\n *\n *  ```\n * @Component({selector: \"login-comp\"})\n * @View({\n *      directives: [formDirectives],\n *      inline: \"<input type='text' [control]='loginControl'>\"\n *      })\n * class LoginComp {\n *  loginControl:Control;\n *\n *  constructor() {\n *    this.loginControl = new Control('');\n *  }\n * }\n *\n *  ```\n *\n * @exportedAs angular2/forms\n */\n@Directive({\n  selector: '[control]',\n  properties: {\n    'controlOrName' : 'control'\n  }\n})\nexport class ControlDirective {\n  _groupDirective:ControlGroupDirective;\n\n  _controlOrName:any;\n  valueAccessor:any; //ControlValueAccessor\n\n  validator:Function;\n\n  constructor(@Optional() @Ancestor() groupDirective:ControlGroupDirective, valueAccessor:DefaultValueAccessor)  {\n    this._groupDirective = groupDirective;\n    this._controlOrName = null;\n    this.valueAccessor = valueAccessor;\n    this.validator = Validators.nullValidator;\n  }\n\n  set controlOrName(controlOrName) {\n    this._controlOrName = controlOrName;\n\n    if(isPresent(this._groupDirective)) {\n      this._groupDirective.addDirective(this);\n    }\n\n    var c = this._control();\n    c.validator = Validators.compose([c.validator, this.validator]);\n\n    this._updateDomValue();\n    this._setUpUpdateControlValue();\n  }\n\n  _updateDomValue() {\n    this.valueAccessor.writeValue(this._control().value);\n  }\n\n  _setUpUpdateControlValue() {\n    this.valueAccessor.onChange = (newValue) => this._control().updateValue(newValue);\n  }\n\n  _control() {\n    return _lookupControl(this._groupDirective, this._controlOrName);\n  }\n}\n\n/**\n * Binds a control group to a DOM element.\n *\n * # Example\n *\n * In this example, we bind the control group to the form element, and we bind the login and password controls to the\n * login and password elements.\n *\n * Here we use {@link formDirectives}, rather than importing each form directive individually, e.g.\n * `ControlDirective`, `ControlGroupDirective`. This is just a shorthand for the same end result.\n *\n *  ```\n * @Component({selector: \"login-comp\"})\n * @View({\n *      directives: [formDirectives],\n *      inline: \"<form [control-group]='loginForm'>\" +\n *              \"Login <input type='text' control='login'>\" +\n *              \"Password <input type='password' control='password'>\" +\n *              \"<button (click)=\"onLogin()\">Login</button>\" +\n *              \"</form>\"\n *      })\n * class LoginComp {\n *  loginForm:ControlGroup;\n *\n *  constructor() {\n *    this.loginForm = new ControlGroup({\n *      login: new Control(\"\"),\n *      password: new Control(\"\")\n *    });\n *  }\n *\n *  onLogin() {\n *    // this.loginForm.value\n *  }\n * }\n *\n *  ```\n *\n * @exportedAs angular2/forms\n */\n@Directive({\n  selector: '[control-group]',\n  properties: {\n    'controlOrName' : 'control-group'\n  }\n})\nexport class ControlGroupDirective {\n  _groupDirective:ControlGroupDirective;\n  _directives:List<ControlDirective>;\n  _controlOrName:any;\n\n  constructor(@Optional() @Ancestor() groupDirective:ControlGroupDirective) {\n    this._groupDirective = groupDirective;\n    this._directives = ListWrapper.create();\n  }\n\n  set controlOrName(controlOrName) {\n    this._controlOrName = controlOrName;\n    this._updateDomValue();\n  }\n\n  _updateDomValue() {\n    ListWrapper.forEach(this._directives, (cd) => cd._updateDomValue());\n  }\n\n  addDirective(c:ControlDirective) {\n    ListWrapper.push(this._directives, c);\n  }\n\n  findControl(name:string):any {\n    return this._getControlGroup().controls[name];\n  }\n\n  _getControlGroup():ControlGroup {\n    return _lookupControl(this._groupDirective, this._controlOrName);\n  }\n}\n\n/**\n *\n * A list of all the form directives used as part of a `@View` annotation.\n *\n *  This is a shorthand for importing them each individually.\n *\n * @exportedAs angular2/forms\n */\nexport const formDirectives:List = CONST_EXPR([\n  ControlGroupDirective, ControlDirective, CheckboxControlValueAccessor, DefaultValueAccessor\n]);\n"]}