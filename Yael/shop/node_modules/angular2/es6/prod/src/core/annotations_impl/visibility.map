{"version":3,"sources":["visibility.js"],"names":[],"mappings":"AAAA,KAAO,EAAC,KAAI,CAAC,KAAO,2BAAyB,CAAC;AAC9C,KAAO,EAAC,oBAAmB,CAAC,KAAO,mCAAiC,CAAC;AAErE,KAAO,MAAM,WAAS,QAAU,qBAAmB;AAIjD,AACA,YAAU,CAAE,KAAI,AAAO,CAAG,CAAA,wBAAuB,AAAQ,CAAG;AAC1D,QAAI,AAAC,EAAC,CAAC;AACP,OAAG,MAAM,EAAI,MAAI,CAAC;AAClB,OAAG,yBAAyB,EAAI,yBAAuB,CAAC;EAC1D;AAAA,AAEA,kBAAgB,CAAE,AAAD,CAAW;AAC1B,SAAO,CAAA,IAAG,MAAM,IAAM,EAAA,CAAC;EACzB;AAAA,AACF;AAAA,AAjBA,KAAK,eAAe,AAAC,2BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cAMvB,MAAI,AAAC,EAAC,EANwC;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,0BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAD1B,MAAK,KAAgB,WAArB,MAAK,KAAgB,WAC4B;EAAC,CAAC,CAAC,CAAC;AAuDrD,KAAO,MAAM,KAAG,QAAU,WAAS;AACjC,AACA,YAAU,CAAE,AAAD,CAAG;AACZ,QAAI,AAAC,CAAC,CAAA,CAAG,MAAI,CAAC,CAAC;EACjB;AAAA,AACF;AAAA,AA7DA,KAAK,eAAe,AAAC,qBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cAwDvB,MAAI,AAAC,EAAC,EAxDwC;EAAC,CAAC,CAAC,CAAC;AAuGrD,KAAO,MAAM,OAAK,QAAU,WAAS;AACnC,AACA,YAAU,CAAE,AAAD,CAAG;AACZ,QAAI,AAAC,CAAC,CAAA,CAAG,MAAI,CAAC,CAAC;EACjB;AAAA,AACF;AAAA,AA7GA,KAAK,eAAe,AAAC,uBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cAwGvB,MAAI,AAAC,EAAC,EAxGwC;EAAC,CAAC,CAAC,CAAC;AAoKrD,KAAO,MAAM,SAAO,QAAU,WAAS;AACrC,AACA,YAAU,CAAE,AAAD,CAAG;AACZ,QAAI,AAAC,CAAC,MAAK,CAAG,MAAI,CAAC,CAAC;EACtB;AAAA,AACF;AAAA,AA1KA,KAAK,eAAe,AAAC,yBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cAqKvB,MAAI,AAAC,EAAC,EArKwC;EAAC,CAAC,CAAC,CAAC;AA6MrD,KAAO,MAAM,UAAQ,QAAU,WAAS;AACtC,AACA,YAAU,CAAE,AAAD,CAAG;AACZ,QAAI,AAAC,CAAC,MAAK,CAAG,KAAG,CAAC,CAAC;EACrB;AAAA,AACF;AAAA,AAnNA,KAAK,eAAe,AAAC,0BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cA8MvB,MAAI,AAAC,EAAC,EA9MwC;EAAC,CAAC,CAAC,CAAC;AAmNrD","file":"angular2/src/core/annotations_impl/visibility.es6","sourcesContent":["import {CONST} from 'angular2/src/facade/lang';\nimport {DependencyAnnotation} from 'angular2/src/di/annotations_impl';\n\nexport class Visibility extends DependencyAnnotation {\n  depth: number;\n  crossComponentBoundaries: boolean;\n\n  @CONST()\n  constructor(depth:number, crossComponentBoundaries:boolean) {\n    super();\n    this.depth = depth;\n    this.crossComponentBoundaries = crossComponentBoundaries;\n  }\n\n  shouldIncludeSelf():boolean {\n    return this.depth === 0;\n  }\n}\n\n/**\n * Specifies that an injector should retrieve a dependency from its element.\n *\n * ## Example\n *\n * Here is a simple directive that retrieves a dependency from its element.\n *\n * ```\n * @Directive({\n *   selector: '[dependency]',\n *   properties: {\n *     'id':'dependency'\n *   }\n * })\n * class Dependency {\n *   id:string;\n * }\n *\n *\n * @Directive({\n *   selector: '[my-directive]'\n * })\n * class Dependency {\n *   constructor(@Self() dependency:Dependency) {\n *     expect(dependency.id).toEqual(1);\n *   };\n * }\n * ```\n *\n * We use this with the following HTML template:\n *\n * ```\n *<div dependency=\"1\" my-directive></div>\n * ```\n *\n * @exportedAs angular2/annotations\n */\nexport class Self extends Visibility {\n  @CONST()\n  constructor() {\n    super(0, false);\n  }\n}\n\n/**\n * Specifies that an injector should retrieve a dependency from the direct parent.\n *\n * ## Example\n *\n * Here is a simple directive that retrieves a dependency from its parent element.\n *\n * ```\n * @Directive({\n *   selector: '[dependency]',\n *   properties: {\n *     'id':'dependency'\n *   }\n * })\n * class Dependency {\n *   id:string;\n * }\n *\n *\n * @Directive({\n *   selector: '[my-directive]'\n * })\n * class Dependency {\n *   constructor(@Parent() dependency:Dependency) {\n *     expect(dependency.id).toEqual(1);\n *   };\n * }\n * ```\n *\n * We use this with the following HTML template:\n *\n * ```\n * <div dependency=\"1\">\n *   <div dependency=\"2\" my-directive></div>\n * </div>\n * ```\n * The `@Parent()` annotation in our constructor forces the injector to retrieve the dependency from the\n * parent element (even thought the current element could resolve it): Angular injects `dependency=1`.\n *\n * @exportedAs angular2/annotations\n */\nexport class Parent extends Visibility {\n  @CONST()\n  constructor() {\n    super(1, false);\n  }\n}\n\n/**\n * Specifies that an injector should retrieve a dependency from any ancestor element within the same shadow boundary.\n *\n * An ancestor is any element between the parent element and shadow root.\n *\n *\n * ## Example\n *\n * Here is a simple directive that retrieves a dependency from an ancestor element.\n *\n * ```\n * @Directive({\n *   selector: '[dependency]',\n *   properties: {\n *     'id':'dependency'\n *   }\n * })\n * class Dependency {\n *   id:string;\n * }\n *\n *\n * @Directive({\n *   selector: '[my-directive]'\n * })\n * class Dependency {\n *   constructor(@Ancestor() dependency:Dependency) {\n *     expect(dependency.id).toEqual(2);\n *   };\n * }\n * ```\n *\n *  We use this with the following HTML template:\n *\n * ```\n * <div dependency=\"1\">\n *   <div dependency=\"2\">\n *     <div>\n *       <div dependency=\"3\" my-directive></div>\n *     </div>\n *   </div>\n * </div>\n * ```\n *\n * The `@Ancestor()` annotation in our constructor forces the injector to retrieve the dependency from the\n * nearest ancestor element:\n * - The current element `dependency=\"3\"` is skipped because it is not an ancestor.\n * - Next parent has no directives `<div>`\n * - Next parent has the `Dependency` directive and so the dependency is satisfied.\n *\n * Angular injects `dependency=2`.\n *\n * @exportedAs angular2/annotations\n */\nexport class Ancestor extends Visibility {\n  @CONST()\n  constructor() {\n    super(999999, false);\n  }\n}\n\n/**\n * Specifies that an injector should retrieve a dependency from any ancestor element.\n *\n * An ancestor is any element between the parent element and shadow root.\n *\n *\n * ## Example\n *\n * Here is a simple directive that retrieves a dependency from an ancestor element.\n *\n * ```\n * @Directive({\n *   selector: '[dependency]',\n *   properties: {\n *     'id':'dependency'\n *   }\n * })\n * class Dependency {\n *   id:string;\n * }\n *\n *\n * @Directive({\n *   selector: '[my-directive]'\n * })\n * class Dependency {\n *   constructor(@Unbounded() dependency:Dependency) {\n *     expect(dependency.id).toEqual(2);\n *   };\n * }\n * ```\n *\n * @exportedAs angular2/annotations\n */\nexport class Unbounded extends Visibility {\n  @CONST()\n  constructor() {\n    super(999999, true);\n  }\n}\n"]}