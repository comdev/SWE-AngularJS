import {CONST} from 'angular2/src/facade/lang';
import {DependencyAnnotation} from 'angular2/src/di/annotations_impl';
export class Visibility extends DependencyAnnotation {
  constructor(depth, crossComponentBoundaries) {
    super();
    this.depth = depth;
    this.crossComponentBoundaries = crossComponentBoundaries;
  }
  shouldIncludeSelf() {
    return this.depth === 0;
  }
}
Object.defineProperty(Visibility, "annotations", {get: function() {
    return [new CONST()];
  }});
Object.defineProperty(Visibility, "parameters", {get: function() {
    return [[assert.type.number], [assert.type.boolean]];
  }});
export class Self extends Visibility {
  constructor() {
    super(0, false);
  }
}
Object.defineProperty(Self, "annotations", {get: function() {
    return [new CONST()];
  }});
export class Parent extends Visibility {
  constructor() {
    super(1, false);
  }
}
Object.defineProperty(Parent, "annotations", {get: function() {
    return [new CONST()];
  }});
export class Ancestor extends Visibility {
  constructor() {
    super(999999, false);
  }
}
Object.defineProperty(Ancestor, "annotations", {get: function() {
    return [new CONST()];
  }});
export class Unbounded extends Visibility {
  constructor() {
    super(999999, true);
  }
}
Object.defineProperty(Unbounded, "annotations", {get: function() {
    return [new CONST()];
  }});
//# sourceMappingURL=visibility.js.map

//# sourceMappingURL=./visibility.map