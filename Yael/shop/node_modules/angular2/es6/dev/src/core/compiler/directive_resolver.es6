import {Injectable} from 'angular2/src/di/annotations_impl';
import {resolveForwardRef} from 'angular2/di';
import {Type,
  isPresent,
  BaseException,
  stringify} from 'angular2/src/facade/lang';
import {Directive} from '../annotations_impl/annotations';
import {reflector} from 'angular2/src/reflection/reflection';
export class DirectiveResolver {
  resolve(type) {
    var annotations = reflector.annotations(resolveForwardRef(type));
    if (isPresent(annotations)) {
      for (var i = 0; i < annotations.length; i++) {
        var annotation = annotations[i];
        if (annotation instanceof Directive) {
          return annotation;
        }
      }
    }
    throw new BaseException(`No Directive annotation found on ${stringify(type)}`);
  }
}
Object.defineProperty(DirectiveResolver, "annotations", {get: function() {
    return [new Injectable()];
  }});
Object.defineProperty(DirectiveResolver.prototype.resolve, "parameters", {get: function() {
    return [[Type]];
  }});
//# sourceMappingURL=directive_resolver.js.map

//# sourceMappingURL=./directive_resolver.map